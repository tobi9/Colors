local TouchFb = require("modules.animation")

local box_nodes = {"option1", "option2", "option3", "option4", "option5", "option6"}
question = nil -- this is a global variable
ad_for_hints_played = false
local friction_speed
local frictions_used = false
local chances_missed = false
-- options are sent to the colors script
local options = {}
local schl
local schal_score
local hchl
local hchal_score
local misses = 0
local hits = 0
local option_nodes = {} -- this table is need to set the correct colors

local function set_question()
	local mid_node = gui.get_node("question1")
	if question == "What Word ?" or question == nil then
		question = "What Color ?"
	else
		question = "What Word ?"
	end
	gui.set_text(mid_node, question)
end

local node_table = {}-- each gui script has its own node_table

local function get_nodes(string_table)-- clears the node table if its not empty
	for i in ipairs(string_table) do
		table.insert(node_table, gui.get_node(string_table[i]))
	end
end

local function start_lanim()
	msg.post(".", "start_anim")
end

local function entry_animation(table)
	local q = gui.get_node("question")
	gui.animate(q, "position.x", 420, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
	for i in ipairs(table) do
		gui.animate(table[i], "position.y", 470, gui.EASING_INBOUNCE, 1.5, 0, start_lanim(), gui.PLAYBACK_ONCE_PINGPONG)
	end
end

local function animate_level(table)-- this animation function is used by the nodes that have entry animations
	for i, v in ipairs(table) do
		gui.animate(table[i], "rotation.z", 1, gui.EASING_OUTSINE, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	end
end

--score was declared in the main script
function init(self)
	--msg.post("@system:", "toggle_profile")
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	local node_strings1 = {"s_chal", "h_chal"}
	get_nodes(node_strings1)
	entry_animation(node_table)
	friction_speed = speed
	set_question()
	msg.post(".", "acquire_input_focus")
	local c_id = gui.get_node("chances")
	gui.set_text(c_id, "Chances left\n"..tostring(chances))
	local f_id = gui.get_node("frictions")
	gui.set_text(f_id, tostring(frictions))
	p_chances = chances
	msg.post("main:/main#challenges", "challenges", {id = level_gui})
	msg.post("main:/main#challenges", "send_pointers")
	options = color_strings
	local counter = 1
	repeat
		local node = gui.get_node("option"..tostring(counter))
		local text = gui.get_node("color"..tostring(counter))
		gui.set_color(node, colors[counter])
		gui.set_text(text, color_strings[counter])
		table.insert(option_nodes, node)
		counter = counter + 1
	until(counter > NumOfColorsPicked)
	-- the block of code below adjusts the option boxes and texts for aesthetic purposes
	for k, v in ipairs(box_nodes) do
		local node = gui.get_node(v)
		local text = gui.get_node("color"..tostring(k))
		local pos = gui.get_position(node)
		if NumOfColorsPicked > 3 then
			local node1 = gui.get_node("s_chal")
			local node2 = gui.get_node("h_chal")
			local node3 = gui.get_node("question1")
			local pos1 = gui.get_position(node1)
			local pos2 = gui.get_position(node2)
			local pos3 = gui.get_position(node3)
			pos1.y = 450
			pos2.y = 450
			pos3.y = 750
			gui.set_position(node1, pos1)
			gui.set_position(node2, pos2)
			gui.set_position(node3, pos3)			
		end
		if NumOfColorsPicked == 3 then
			pos.y = 200
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		elseif NumOfColorsPicked == 4 and k == 4 then
			pos.x = 320
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		elseif NumOfColorsPicked == 5 then
			if k == 4 then
				pos.x = 220
			elseif k == 5 then
				pos.x = 440
			end
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		end
		if k > NumOfColorsPicked then
			gui.set_enabled(node, false)
			gui.set_enabled(text, false)
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

--these are pointers to the challenges
local chPtr1
local chPtr2

local current_question = 1

--touch feedback
local button_tapped = nil
local option_ptr

local function handle_input()
	if button_tapped == 'option'..tostring(option_ptr) then
		msg.post(spawn, "check_this", {ans_ptr = option_ptr})
	elseif button_tapped == 'pause' then
		msg.post("main:/main#main", "pause")
	elseif button_tapped == 'frictions' and frictions > 0 then
		speed = friction_speed
		frictions = frictions - 1
		msg.post("main:/main#data_handler", "save_data")
		msg.post(level_gui, "adjust_frictions")
		msg.post(ANALYZER, 'friction_used')
	end
end

local function touch_feedback(node)
	local pos = gui.get_position(node)
	gui.animate(node, "position.x", pos.x + 20, gui.EASING_INOUTBOUNCE, BUTTON_ANIMATION_DURATION, 0, handle_input, gui.PLAYBACK_ONCE_PINGPONG)
end

--hint the player
local hint_player = function(str)
	local option = gui.get_node(str)
	local pos = gui.get_position(option)
	gui.animate(option, "position.y", pos.y + 10, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
end

-- message ids
local add_score = hash("add_score")
local start_anim = hash("start_anim")
local show_hint = hash("show_hint")
local change_qst = hash("change_question")
local what_is_the_question = hash("what_is_the_question")
local msg_pointers = hash("pointers")
local adj_chances = hash("adjust_chances")
local adj_frictions = hash("adjust_frictions")
local msg_challenges = hash("challenges")

function on_message(self, message_id, message, sender)
	local function check_gold_challenge()
		if chPtr1 == 2 or chPtr1 == 4 or chPtr1 == 6 or chPtr1 == 8 then
			if chances ~= const_chances then
				local s_chal = gui.get_node("s_chal")
				gui.set_text(s_chal, " ")
			end
		elseif chPtr1 == 3 or chPtr1 == 4 or chPtr1 == 7 or chPtr1 == 8 then
			if frictions ~= const_frictions then
				local s_chal = gui.get_node("s_chal")
				gui.set_text(s_chal, " ")
			end
		end
	end
	local function check_diamond_challenge()
		if chPtr2 == 2 or chPtr2 == 4 or chPtr2 == 6 or chPtr2 == 8 then
			if chances ~= const_chances then
				local h_chal = gui.get_node("h_chal")
				gui.set_text(h_chal, " ")
			end
		elseif chPtr2 == 3 or chPtr2 == 4 or chPtr2 == 7 or chPtr2 == 8 then
			if frictions ~= const_frictions then
				local h_chal = gui.get_node("h_chal")
				gui.set_text(h_chal, " ")
			end
		end
	end
	if message_id == add_score then
		local score_id = gui.get_node("score") -- gets the id of the score node
		score = score + 1  -- increments the score
		if score > highscore then
			gui.animate(score_id , "position.x", 360, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			highscore = score
			msg.post("main:/main#data_handler", "save_data")
		end
		gui.set_text(score_id, score)-- this displays the incremented score
		hits = hits + 1
	elseif message_id == show_hint then
		hint_player('option'..tostring(message.hint))
	elseif message_id == change_qst then
		set_question()
	elseif message_id == what_is_the_question then
		msg.post(sender, "the_question_is", {q = questionPtr})
	elseif message_id == msg_pointers then
		chPtr1 = message.ptr1 -- gold challenge
		chPtr2 = message.ptr2 --diamond challenge
	elseif message_id == adj_chances then
		chances_missed = true
		msg.post("main:/main#challenges", "miss")
		local c_id = gui.get_node("chances")
		gui.set_text(c_id, "Chances left\n"..tostring(chances))
		gui.animate(c_id , "position.x", 360, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
		misses = misses + 1
	elseif message_id == adj_frictions then
		frictions_used = true
		msg.post("main:/main#challenges", "friction")
		local f_id = gui.get_node("frictions")
		gui.set_text(f_id, frictions)
	elseif message_id == msg_challenges then
		local s_chal = gui.get_node("s_chal")
		local h_chal = gui.get_node("h_chal")
		gui.set_text(s_chal, "GOLD CHALLENGE\n"..tostring(message.s))
		gui.set_text(h_chal, "DIAMOND CHALLENGE\n"..tostring(message.h))
	end
end

local touch = hash("touch")
local back = hash("back")

function on_input(self, action_id, action)
	if action_id == touch and action.released then
		local pause = gui.get_node("pause")
		local _frictions = gui.get_node("_frictions")
		if gui.pick_node(pause, action.x, action.y) then
			button_tapped = 'pause'
			TouchFb.touch_feedback(pause, handle_input)
		elseif gui.pick_node(_frictions, action.x, action.y) then
			button_tapped = 'frictions'
			TouchFb.touch_feedback(_frictions, handle_input)
		end
		for k, v in ipairs(box_nodes) do
			local node = gui.get_node(v)
			if gui.pick_node(node, action.x, action.y) then
				button_tapped = v
				option_ptr = k
				TouchFb.touch_feedback(node, handle_input)
				return
			end
		end
	elseif action_id == back then
		button_tapped = 'pause'
		touch_feedback(pause)
	end
end