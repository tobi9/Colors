local TouchFb = require("modules.animation")
local Prompt = require("modules.prompt")

local dialogue_nodes = {"dialogue_box", "prompt", "yes", "yes1", "no", "no1"}
local box_nodes = {"option1", "option2", "option3", "option4", "option5", "option6"}
local level_nodes
-- these are level node tables for each number of colors the player can pick. This is needed because if its just one
--table, on disablng the exit prompt, all the nodes are re-enabled as opposed to the relevant nodes only being re-enabled  
local level_nodes_3 = {"score", "question", "pause", "_brakes", "brakes", "option3", "option1", "option2", "chances",
"brakes_txt", "pause_txt", "question1", "color1", "color2", "color3",}
local level_nodes_4 = {"score", "question", "pause", "_brakes", "brakes", "option3", "option1", "option2", "chances",
"brakes_txt", "pause_txt", "question1", "color1", "color2", "color3", "option4", "color4"}
local level_nodes_5 = {"score", "question", "pause", "_brakes", "brakes", "option3", "option1", "option2", "chances",
"brakes_txt", "pause_txt", "question1", "color1", "color2", "color3", "option4", "option5", "color4", "color5"}
local level_nodes_6 = {"score", "question", "pause", "_brakes", "brakes", "option3", "option1", "option2", "chances",
"brakes_txt", "pause_txt", "question1", "color1", "color2", "color3", "option4", "option5", "option6",
"color4", "color5", "color6"}
local is_prompt_active
question = nil -- this is a global variable
ad_for_hints_played = false
local brake_speed
-- options are sent to the colors script
local options = {}
local option_nodes = {} -- this table is need to set the correct colors

local function set_question()
	local top_node = gui.get_node("question")
	local mid_node = gui.get_node("question1")
	if question == "WHAT WORD ?" or question == nil then
		question = "WHAT COLOR ?"
	else
		question = "WHAT WORD ?"
	end
	gui.set_text(top_node, question)
	gui.set_text(mid_node, question)
end

--score was declared in the main script
function init(self)
	--assign the correct level node table to level_nodes
	if NumOfColorsPicked == 3 then
		level_nodes = level_nodes_3
	elseif NumOfColorsPicked == 4 then
		level_nodes = level_nodes_4
	elseif NumOfColorsPicked == 5 then
		level_nodes = level_nodes_5
	elseif NumOfColorsPicked == 6 then
		level_nodes = level_nodes_6
	end
	Prompt.prompt(dialogue_nodes, level_nodes)
	is_prompt_active = false
	--msg.post("@system:", "toggle_profile")
	local q = gui.get_node("question")
	gui.animate(q, "position.y", 980, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	brake_speed = speed
	set_question()
	msg.post(".", "acquire_input_focus")
	local b_id = gui.get_node("brakes")
	gui.set_text(b_id, tostring(brakes))
	options = color_strings
	local counter = 1
	repeat
		local node = gui.get_node("option"..tostring(counter))
		local text = gui.get_node("color"..tostring(counter))
		gui.set_color(node, colors[counter])
		gui.set_text(text, color_strings[counter])
		table.insert(option_nodes, node)
		counter = counter + 1
	until(counter > NumOfColorsPicked)
	-- the block of code below adjusts the option boxes and texts for aesthetic purposes
	for k, v in ipairs(box_nodes) do
		local node = gui.get_node(v)
		local text = gui.get_node("color"..tostring(k))
		local pos = gui.get_position(node)
		if NumOfColorsPicked > 3 then
			local node = gui.get_node("question1")
			local pos = gui.get_position(node)
			pos.y = 750
			gui.set_position(node, pos)		
		end
		if NumOfColorsPicked == 3 then
			pos.y = 200
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		elseif NumOfColorsPicked == 4 and k == 4 then
			pos.x = 320
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		elseif NumOfColorsPicked == 5 then
			if k == 4 then
				pos.x = 220
			elseif k == 5 then
				pos.x = 440
			end
			gui.set_position(node, pos)
			gui.set_position(text, pos)
		end
		if k > NumOfColorsPicked then
			gui.set_enabled(node, false)
			gui.set_enabled(text, false)
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

--touch feedback
local button_tapped = nil
local option_ptr

local prompt_context -- the reason the prompt is shown. It can only be 'gameover' or 'hints'

local function handle_input()
	if button_tapped == 'option'..tostring(option_ptr) then
		msg.post(spawn, "check_this", {ans_ptr = option_ptr})
	elseif button_tapped == 'pause' then
		msg.post("main:/main#main", "pause")
	elseif button_tapped == 'brakes' and brakes > 0 then
		speed = brake_speed--friction_speed
		brakes = brakes - 1
		brake_score = score
		msg.post("main:/main#data_handler", "save_data")
		msg.post(level_gui, "adjust_brakes")
	elseif button_tapped == "yes" then
		if prompt_context == "gameover" then
			if lives > 0 then
				lives = lives - 1
				Prompt.prompt(dialogue_nodes, level_nodes)
				is_prompt_active = false
				msg.post(spawn, "unhide")		
			end
		else
			--show prompt
			msg.post(main, "show_ad")
		end
	elseif button_tapped == "no" then
		if prompt_context == "gameover" then
			msg.post(main, "gameover")
		else
			Prompt.prompt(dialogue_nodes, level_nodes)
			is_prompt_active = false
			msg.post(spawn, "unhide")
		end
	end
end

local function touch_feedback(node)
	local pos = gui.get_position(node)
	gui.animate(node, "position.x", pos.x + 20, gui.EASING_INOUTBOUNCE, BUTTON_ANIMATION_DURATION, 0, handle_input, gui.PLAYBACK_ONCE_PINGPONG)
end

--hint the player
local hint_player = function(str)
	local option = gui.get_node(str)
	local pos = gui.get_position(option)
	gui.animate(option, "position.y", pos.y + 10, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
end

-- message ids
local add_score = hash("add_score")
local show_hint = hash("show_hint")
local change_qst = hash("change_question")
local what_is_the_question = hash("what_is_the_question")
local msg_pointers = hash("pointers")
local adj_brakes = hash("adjust_brakes")
local msg_show_prompt = hash("show_prompt")
local msg_completed = hash("completed")
function on_message(self, message_id, message, sender)
	if message_id == add_score then
		local score_id = gui.get_node("score") -- gets the id of the score node
		score = score + 1  -- increments the score
		if score > highscore then
			gui.animate(score_id , "position.x", 360, gui.EASING_INBOUNCE, 0.8, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			highscore = score
			msg.post("main:/main#data_handler", "save_data")
		end
		gui.set_text(score_id, score)-- this displays the incremented score
	elseif message_id == show_hint then
		hint_player('option'..tostring(message.hint))
	elseif message_id == change_qst then
		set_question()
	elseif message_id == what_is_the_question then
		msg.post(sender, "the_question_is", {q = questionPtr})
	elseif message_id == adj_brakes then
		frictions_used = true
		local b_id = gui.get_node("brakes")
		gui.set_text(b_id, brakes)
	elseif message_id == msg_show_prompt then
		Prompt.prompt(level_nodes, dialogue_nodes)
		is_prompt_active = true
		local prompt = gui.get_node("prompt")
		if message.situation == "gameover" then
			gui.set_text(prompt, "WOULD YOU LIKE TO CONTINUE?\nLIVES\n"..tostring(lives).."\nIT WILL COST 1 LIVE")
		else
			gui.set_text(prompt, "WOULD YOU LIKE SOME HINTS?\n TAP YES TO WATCH THE VIDEO")
		end
		prompt_context = message.situation
		msg.post(sender, "hide")
	elseif message_id == msg_completed then
		--rewarded video complete
		msg.post("level:/controller#controller", "new hints")
		Prompt.prompt(dialogue_nodes, level_nodes)
		is_prompt_active = false
		msg.post(spawn, "unhide")
		ad_for_hints_played = true -- decalerd in the controller script
	end
end

local touch = hash("touch")
local back = hash("back")

function on_input(self, action_id, action)
	if action_id == touch and action.released then
		if is_prompt_active == false then
			local pause = gui.get_node("pause")
			local _frictions = gui.get_node("_brakes")
			if gui.pick_node(pause, action.x, action.y) then
				button_tapped = 'pause'
				TouchFb.touch_feedback(pause, handle_input)
			elseif gui.pick_node(_frictions, action.x, action.y) then
				button_tapped = 'brakes'
				TouchFb.touch_feedback(_frictions, handle_input)
			end
			for k, v in ipairs(box_nodes) do
				local node = gui.get_node(v)
				if gui.pick_node(node, action.x, action.y) then
					button_tapped = v
					option_ptr = k
					TouchFb.touch_feedback(node, handle_input)
					return
				end
			end
		else
			local yes = gui.get_node("yes")
			local no = gui.get_node("no")
			if gui.pick_node(yes, action.x, action.y) then
				button_tapped = 'yes'
				TouchFb.touch_feedback(yes, handle_input)
			elseif gui.pick_node(no, action.x, action.y) then
				button_tapped = 'no'
				TouchFb.touch_feedback(no,handle_input)
			end
		end
	elseif action_id == back then
		if is_prompt_active == false then
			button_tapped = 'pause'
			touch_feedback(pause)
		end
	end
end