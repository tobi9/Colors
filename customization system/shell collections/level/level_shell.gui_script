local Customizer = require("modules.customizer")
local TouchFb = require("modules.animation")
local col_name = "level" -- this is needed by the customizer to avoid conflicts in memory

-- the tables below are needed to revert the changes made
local node_strings = {"score", 'question', "pause", "_brakes", "brakes"}
local node_colors = {}
local ledger = {} -- each element in this table is a table {node, clr}. clr is the color node was before it was changed

function init(self)
	--take a snapshot of the unaltered state of the collection
	Customizer.take_snapshot(node_strings, node_colors)
	-- node each node to its appropriate color
	for k, v in ipairs(node_strings) do
		Customizer.set_node_color(v, col_name)
	end
	msg.post(".", "acquire_input_focus")
	msg.post(customizer_controller, "active_shell", {collection = col_name})
	--update the currency info
    local b = gui.get_node("brakes")
    gui.set_text(b,brakes)
end

function final(self)
	msg.post(".", "release_input_focus")
end

color_chosen = nil
node_holder = nil-- this is a global variable. It holds the node to be changed in memory until the color is chosen
local chosen_node
local change_all = false -- this variable is set to true when the players clicks the set all button
function on_message(self, message_id, message, sender)
	local enabled = hash("enabled")
	if message_id == enabled then
		if color_chosen ~= nil and #color_chosen > 0 and change_all == false then
			Customizer.record_change(node_holder, ledger)
			Customizer.set_new_node_color(node_holder, color_chosen, col_name)
		else
			-- This sets all the nodes to a particular color
			local node_holder
			if color_chosen ~= nil then
				for k, v in ipairs(node_strings) do
					--this is because of the title. As not to mix up the box with the text
					node_holder = gui.get_node(v)
					Customizer.record_change(node_holder, ledger)
					Customizer.set_new_node_color(node_holder, color_chosen, col_name)
				end
			end
		end
	end
	change_all = false -- reset to avoid repetition
end

local button_tapped
local handle_input = function()
	if button_tapped == "_ok" then
		msg.post(customizer_controller, "unload_level_shell")
	elseif button_tapped == "_undo" then
		Customizer.undo_change(ledger)
	elseif button_tapped == "_clear_all" then
		Customizer.clear_changes(node_strings, node_colors)
	elseif button_tapped == "_set_all" then
		change_all = true
		msg.post(customizer_controller, "load_palette", {collection = col_name})
	else
		--local buttons = {"score", 'question', "pause", "_brakes", "brakes", }
		for k, v in ipairs(node_strings) do
			if button_tapped == v then
					chosen_node = v
						node_holder = gui.get_node(chosen_node)
					msg.post(customizer_controller, "load_palette", {collection = col_name})
				break 
			end
		end
	end
	button_tapped = nil
	local transperent_qst = gui.get_node("question")
	gui.set_inherit_alpha(transperent_qst, 0.22)
end

function on_input(self, action_id, action)
	local touch = hash("touch") -- touch_id
	if action_id == touch and action.released then
		local buttons = {"_brakes", "pause", "_clear_all", "_set_all", "_undo", "_ok"}
		-- this is specific because it's a box node that is to be invisible 
		local score = gui.get_node("_score")
		local question = gui.get_node("_question")
		local brakes1 = gui.get_node("_brakes1")
		if gui.pick_node(score, action.x, action.y) then
			button_tapped = 'score'
			local node = gui.get_node("score")
			TouchFb.touch_feedback(node, handle_input)
		elseif gui.pick_node(question, action.x, action.y) then
			button_tapped = 'question'
			local node = gui.get_node("question")
			TouchFb.touch_feedback(node, handle_input)
		elseif gui.pick_node(brakes1, action.x, action.y) then
			button_tapped = 'brakes'
			local node = gui.get_node("brakes")
			TouchFb.touch_feedback(node, handle_input)
		else
			for k, v in ipairs(buttons) do
				local node = gui.get_node(v)
				if gui.pick_node(node, action.x, action.y) then
					button_tapped = v
					TouchFb.touch_feedback(node, handle_input)
					break
				end
			end
		end
	end
end