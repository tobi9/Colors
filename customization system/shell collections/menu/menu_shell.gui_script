local Customizer = require("modules.customizer")
local TouchFb = require("modules.animation")
local Menu = require("modules.prompt")
local col_name = "menu" -- this is needed by the customizer to avoid conflicts in memory

-- the tables below are needed to revert the changes made
local node_strings = {'start', 'customize','upgrades', 'sound', 'exit','title', '_start', '_customize', '_upgrades',
 '_sound', '_exit'}
local node_colors = {}
local ledger = {} -- each element in this table is a table {node, clr}. clr is the color node was before it was changed

local nodes1 = {'prompt', 'start', 'customize', 'upgrades', 'sound', 'exit', 'title', '_start', '_customize',
'_upgrades', '_sound', '_exit',"_clear_all", "_undo", "_ok", "clear_all", "undo", "ok"}
local nodes2 = {'option_dialogue_box', 'option_text' ,'box_text' ,'txt_text' ,'box' ,'txt', '_close_option', 
'close_option'}
local prompt_status -- is the option prompt active ? active = true, inactive = false

function init(self)
	--take a snapshot of the unaltered state of the collection
	Customizer.take_snapshot(node_strings, node_colors)
	--hide the option prompt
	Menu.hide_prompt(nodes2, nodes1)
	prompt_status = false
	-- node each node to its appropriate color
	local text_nodes = {'start', 'customize', 'upgrades', 'sound', 'exit'}
	local box_nodes = {'title', '_start', '_customize','_upgrades', '_sound', '_exit'}
	for k, v in ipairs(text_nodes) do
		Customizer.set_node_color(v, default_text_clr_info, col_name)
	end
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, default_box_clr_info, col_name)
	end
	msg.post(".", "acquire_input_focus")

end

function final(self)
	msg.post(".", "release_input_focus")
end

color_chosen = nil
node_holder = nil-- this is a global variable. It holds the node to be changed in memory until the color is chosen
local chosen_node
function on_message(self, message_id, message, sender)
	local enabled = hash("enabled")
	if message_id == enabled then
		if color_chosen ~= nil and #color_chosen > 0 then
			Customizer.record_change(node_holder, ledger)
			Customizer.set_new_node_color(node_holder, color_chosen, col_name)
		end
	end
end

local button_tapped
local handle_input = function()
	if button_tapped == "ok" then

	elseif button_tapped == "undo" then
		Customizer.undo_change(ledger)
	elseif button_tapped == "clear_all" then
		Customizer.clear_changes(node_strings, node_colors)
	elseif button_tapped == "box" then
		node_holder = gui.get_node("_"..chosen_node)
		msg.post(customizer_controller, "load_palette", {collection = "menu"})
		--hide the option prompt
		Menu.hide_prompt(nodes2, nodes1)
		prompt_status = false
	elseif button_tapped == "txt" then
		node_holder = gui.get_node(chosen_node)
		msg.post(customizer_controller, "load_palette", {collection = "menu"})
		--hide the option prompt
		Menu.hide_prompt(nodes2, nodes1)
		prompt_status = false
	elseif button_tapped == "_close_option" then
		Menu.hide_prompt(nodes2, nodes1)
		prompt_status = false
	else
		local buttons = {'title', "start", "customize","upgrades", "sound", "exit","clear_all", "undo", "ok"}
		for k, v in ipairs(buttons) do
			if button_tapped == v then
				if v == "title" then
					chosen_node = v
					node_holder = gui.get_node(chosen_node)

					msg.post(customizer_controller, "load_palette", {collection = "menu"})
				else
					chosen_node = v
					Menu.show_prompt(nodes2, nodes1)
					prompt_status = true
				end
				break 
			end
		end
	end
	button_tapped = nil
end

function on_input(self, action_id, action)
	local touch = hash("touch") -- touch_id
	if action_id == touch and action.released then
		if prompt_status == false then
			local buttons = {"start", "customize","upgrades", "sound", "exit","clear_all", "undo", "ok"}
			local title = gui.get_node('_title') -- this is specific because it's a box node that is to be invisible 
			if gui.pick_node(title, action.x, action.y) then
				button_tapped = 'title'
				local node = gui.get_node("title")
				TouchFb.touch_feedback(node, handle_input)
			else
				for k, v in ipairs(buttons) do
					local node = gui.get_node("_"..v)
					if gui.pick_node(node, action.x, action.y) then
						button_tapped = v
						TouchFb.touch_feedback(node, handle_input)
						break
					end
				end
			end
			elseif prompt_status == true then
			local buttons = {"box", "txt", "_close_option"}			
			for k, v in ipairs(buttons) do
				local node = gui.get_node(v)
				if gui.pick_node(node, action.x, action.y) then
					button_tapped = v
					TouchFb.touch_feedback(node, handle_input)
					break
				end
			end
		end
	end
end