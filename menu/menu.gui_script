local TouchFb = require("modules.animation")
local Colors = require("modules.colors")
local Prompt = require("modules.prompt")

local button_tapped = nil

--These tables are needed to show the exit prompt
local exit_dialogue_nodes = {'exit_dialogue_box', 'exit_text', 'yes_exit', 'no_exit', 'yes','no'}	
local menu_nodes = {'title', 'start', "_start", "upgrades", "_upgrades", "sound", 
"_sound", "exit", "_exit", "_customize", "customize", "_board", "brakes", "lives", "coins",
"money", "challenge_txt", "challenge", "_chal_but", "chal_but", "challenge_reward"}
local is_exit_prompt_active

local chal_status -- this is the status of the challenge. It is true if the challenge has been passed and false otherwise
chal_changes_allowed = nil -- the number of times the player can change the challenge it is a global variable

local req_challenge = function()
	msg.post("main:/main#challenges", "challenges_requested")
end

local function handle_input()
	if button_tapped == 'start' then
		msg.post(main, "start")
	elseif button_tapped == 'customize' then
		msg.post(main, "customizer")
	elseif button_tapped == 'upgrades' then
		msg.post(main, "upgrades")
	elseif button_tapped == 'sound' then
		msg.post(main, "sound")
	elseif button_tapped == 'chal_but' then
		if chal_status then
			chal_changes_allowed = 2
			--give reward
			msg.post("main:/main#challenges", "give_reward")
			msg.post("main:/main#challenges", "change_challenge")
			timer.delay(0.001, false, req_challenge)
		else
			--[[if chal_changes_allowed > 0 then
				chal_changes_allowed = chal_changes_allowed - 1]]
				msg.post("main:/main#challenges", "change_challenge")
				timer.delay(0.001, false, req_challenge)
			--end
		end
	elseif button_tapped == 'exit' then
		Prompt.prompt(menu_nodes, exit_dialogue_nodes, is_exit_prompt_active)
		is_exit_prompt_active = true
	elseif button_tapped == 'yes' then
		msg.post("@system:", "exit", {code = 0})
	else
		Prompt.prompt(exit_dialogue_nodes, menu_nodes, is_exit_prompt_active)
		is_exit_prompt_active = false
	end
end

local Customizer = require("modules.customizer")
local col_name = "menu" -- this is needed by the customizer to avoid conflicts in memory

local update_info = function()
    local m = gui.get_node("money")
    gui.set_text(m, "$"..tostring(money))
    local b = gui.get_node("brakes")
    gui.set_text(b, "BRAKES\n"..tostring(brakes))
    local l = gui.get_node("lives")
    gui.set_text(l, "LIVES\n"..tostring(lives))
    local c = gui.get_node("coins")
    gui.set_text(c, "COINS\n"..tostring(coins))
end

function init(self)
	req_challenge()
	msg.post(".", "acquire_input_focus")
	-- node each node to its appropriate color
	local box_nodes = {'title', '_start', '_customize','_upgrades', '_sound', '_exit', '_board'}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, --[[default_box_clr_info,]] col_name)
	end
	--set chal_but to _board's color
	gui.set_color(gui.get_node("chal_but"), gui.get_color(gui.get_node("_board")))
	
	Prompt.prompt(exit_dialogue_nodes, menu_nodes)
	is_exit_prompt_active = false
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	-- retrive the value from memory or set it to the default
	local folder = "Trick Colors Test"
	local file = sys.get_save_file(folder, "chal_changes_allowed")
	local tab = sys.load(file)
	if #tab == 0 then
		chal_changes_allowed = 2
	else
		chal_changes_allowed = tab[1]
	end
	update_info()
end

local msg_chal = hash("chal")
function on_message(self, message_id, message, sender)
	if message_id == msg_chal then
		local node = gui.get_node("challenge")
		gui.set_text(node, message.c)
		chal_status = message.status
		node = gui.get_node("chal_but") -- I reused the node variable to accomodate the text on the challenge button
		if chal_status then
			gui.set_text(node, "TAP TO GET\nREWARD")
		else
			gui.set_text(node, "CHANGE\nCHALLENGE")
		end
		node = gui.get_node("challenge_reward")
		gui.set_text(node, "REWARD\n$"..message.reward.."\nX\nCOLORS USED")
	elseif message_id == msg_chal_reward then
		money = money + message.reward
		update_info()
	end
end

function final(self)
	msg.post(".", "release_input_focus")
	local folder = "Trick Colors test"
	local file = sys.get_save_file(folder, "chal_changes_allowed")
	local tab = {chal_changes_allowed}
	sys.save(file, tab)
end
-- action ids
local touch = hash('touch')
local back = hash('back')
function on_input(self, action_id, action)
	if action_id == touch and action.released then
		local start = gui.get_node("_start")
		local customizer = gui.get_node("_customize")
		local upgrades = gui.get_node("_upgrades")
		local sound = gui.get_node("_sound")
		local exit = gui.get_node("_exit")
		local chal_but = gui.get_node("_chal_but")
		local yes = gui.get_node("yes_exit")
		local no = gui.get_node("no_exit")
		--main = "main:/main#main"
		if is_exit_prompt_active == false then
			if gui.pick_node(start, action.x, action.y) then
				button_tapped = 'start'
				TouchFb.touch_feedback(start, handle_input)
			elseif gui.pick_node(customizer, action.x, action.y) then
				button_tapped = 'customize'
				TouchFb.touch_feedback(customizer, handle_input)
			elseif gui.pick_node(upgrades, action.x, action.y) then
				button_tapped = 'upgrades'
				TouchFb.touch_feedback(upgrades, handle_input)
			elseif gui.pick_node(sound, action.x, action.y) then
				button_tapped = 'sound'
				TouchFb.touch_feedback(sound, handle_input)
			elseif gui.pick_node(exit, action.x, action.y) then
				button_tapped = 'exit'
				TouchFb.touch_feedback(exit, handle_input)
			elseif gui.pick_node(chal_but, action.x, action.y) then
				button_tapped = 'chal_but'
				TouchFb.touch_feedback(chal_but, handle_input)
			end
		else
			if gui.pick_node(yes, action.x, action.y) then
				button_tapped = 'yes'
				TouchFb.touch_feedback(yes, handle_input)
			elseif gui.pick_node(no, action.x, action.y) then
				button_tapped = 'no'
				TouchFb.touch_feedback(no,handle_input)
			end
		end
	elseif action_id == back then
		if is_exit_prompt_active == false then
			button_tapped = 'exit'
			TouchFb.touch_feedback(exit, handle_input)
		else
			Prompt.prompt(exit_dialogue_nodes, menu_nodes)
			is_exit_prompt_active = false
		end
	end
end