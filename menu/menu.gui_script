local TouchFb = require("modules.animation")
local Colors = require("modules.colors")

local button_tapped = nil

--These tables are needed to show the exit prompt
local is_exit_prompt_active

local function hide_exit_prompt()
	local nodes = {'exit_dialogue_box', 'exit_text', 'yes_exit', 'no_exit', 'yes','no'}
	for i in ipairs(nodes) do
		local node = gui.get_node(nodes[i])
		gui.set_enabled(node, false)
	end

	local node_strings = {'heading', 'start', "_start", "upgrades", "_upgrades", "sound", 
	"_sound", "exit", "_exit"}
	for i in ipairs(node_strings) do
		local node = gui.get_node(node_strings[i])
		gui.set_enabled(node, true)
	end
	is_exit_prompt_active = false
end

local function show_exit_prompt()
	local nodes = {'exit_dialogue_box', 'exit_text', 'yes_exit', 'no_exit', 'yes','no'}	
	for i in ipairs(nodes) do
		local node = gui.get_node(nodes[i])
		gui.set_enabled(node, true)
	end

	--local text = gui.get_node('exit_text')
	local node_strings = {'heading', 'start', "_start", "upgrades", "_upgrades", "sound", 
	"_sound", "exit", "_exit"}
	for i in ipairs(node_strings) do
		local node = gui.get_node(node_strings[i])
		gui.set_enabled(node, false)
	end
	is_exit_prompt_active = true
end

local function handle_input()
	if button_tapped == 'start' then
		msg.post(main, "start")
	elseif button_tapped == 'customize' then
		msg.post(main, "customizer")
	elseif button_tapped == 'upgrades' then
		msg.post(main, "upgrades")
	elseif button_tapped == 'sound' then
		msg.post(main, "sound")
	elseif button_tapped == 'exit' then
		show_exit_prompt()
	elseif button_tapped == 'yes' then
		msg.post("@system:", "exit", {code = 0})
	else
		hide_exit_prompt()
	end
end

local Customizer = require("modules.customizer")
local col_name = "menu" -- this is needed by the customizer to avoid conflicts in memory

function init(self)
	msg.post(".", "acquire_input_focus")
	-- node each node to its appropriate color
	local text_nodes = {'start', 'upgrades', 'sound', 'exit'}
	local box_nodes = {'heading', '_start', '_upgrades', '_sound', '_exit'}
	for k, v in ipairs(text_nodes) do
		Customizer.set_node_color(v, default_text_clr_info, col_name)
	end
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, default_box_clr_info, col_name)
	end

	hide_exit_prompt()
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
end

function final(self)
	msg.post(".", "release_input_focus")
end

-- action ids
local touch = hash('touch')
local back = hash('back')
function on_input(self, action_id, action)
	if action_id == touch and action.released then
		local start = gui.get_node("_start")
		local customizer = gui.get_node("_customize")
		local upgrades = gui.get_node("_upgrades")
		local sound = gui.get_node("_sound")
		local exit = gui.get_node("_exit")
		local yes = gui.get_node("yes_exit")
		local no = gui.get_node("no_exit")
		--main = "main:/main#main"
		if is_exit_prompt_active == false then
			if gui.pick_node(start, action.x, action.y) then
				button_tapped = 'start'
				TouchFb.touch_feedback(start, handle_input)
			elseif gui.pick_node(customizer, action.x, action.y) then
				button_tapped = 'customize'
				TouchFb.touch_feedback(customizer, handle_input)
			elseif gui.pick_node(upgrades, action.x, action.y) then
				button_tapped = 'upgrades'
				TouchFb.touch_feedback(upgrades, handle_input)
			elseif gui.pick_node(sound, action.x, action.y) then
				button_tapped = 'sound'
				TouchFb.touch_feedback(sound, handle_input)
			elseif gui.pick_node(exit, action.x, action.y) then
				button_tapped = 'exit'
				TouchFb.touch_feedback(exit, handle_input)
			end
		else
			if gui.pick_node(yes, action.x, action.y) then
				button_tapped = 'yes'
				TouchFb.touch_feedback(yes, handle_input)
			elseif gui.pick_node(no, action.x, action.y) then
				button_tapped = 'no'
				TouchFb.touch_feedback(no,handle_input)
			end
		end
	elseif action_id == back then
		if is_exit_prompt_active == false then
			button_tapped = 'exit'
			TouchFb.touch_feedback(exit, handle_input)
		else
			hide_exit_prompt()
		end
	end
end