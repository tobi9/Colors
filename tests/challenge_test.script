local num_of_clrs_pkd = 3
local num_of_unlkd_clrs = 3
local highscore = 25


--[[
	The challenges should get harder as the player gets better. So it needs to communicate with the analyser script to determine the kind of 
	challenges the player gets by looking at the player stats.
]]

-- I need to decide what n is how to set the appropriate value of n
-- Some challenges will be very difficult so they either need to be changed or need to be set for the very best players(NB the analyer would take
--into account how often the players beats the highscore and how large the margin is) I have to make a decision
--I'm designing the challenges with the intention of making a miss gameover instead of giving the players chances
local challenges = {--[[1]]	"REACH A SCORE OF "..tostring(n),
--[[2]]	"REACH A SCORE OF\n"..tostring(n).." WITHOUT USING FRICTIONS",

--[[3]]	"BEAT YOUR HIGHSCORE",
--[[4]] "BEAT YOUR HIGHSCORE\nWITHOUT USING FRICTIONS",

--[[5]]	"GET A "..tostring(n).."X COLOR STREAK",
--[[6]]	"GET A "..tostring(n).."X COLOR STREAK\nWITHOUT USING FRICTIONS",

--[[7]]	"GET A "..tostring(n).."X WORD STREAK",
--[[8]]	"GET A "..tostring(n).."X WORD STREAK\nWITHOUT USING FRICTIONS",

--[[9]]	"DOUBLE YOUR HIGHSCORE",
--[[10]]"DOUBLE YOUR HIGHSCORE\nWITHOUT USING FRICTIONS",

--[[11]]"TRIPLE YOUR HIGHSCORE",
--[[12]]"TRIPLE YOUR HIGHSCORE\nWITHOUT USING FRICTIONS"
}
local challenges = {--[[1]]	"Reach a score of "..tostring(n),
--[[2]]	"Reach a score of "..tostring(n).."\nwithout using frictions",

--[[3]]	"Beat your highscore",
--[[4]] "Beat your highscore\nwithout using frictions",

--[[5]]	"Get a "..tostring(n).."X color streak",
--[[6]]	"Get a "..tostring(n).."X color streak\nwithout using frictions",

--[[7]]	"Get a "..tostring(n).."X word streak",
--[[8]]	"Get a "..tostring(n).."X word streak\nwithout using frictions",

--[[9]]	"Double your highscore",
--[[10]]"Double your highscore\nwithout using frictions",

--[[11]]"Triple your highscore",
--[[12]]"Triple your highscore\nwithout using frictions"
}


local chosen_chal_index
local n


local check_memory_loc = function(str)
	local folder = "Trick Colors test"
	local file = sys.get_save_file(folder, str)
	local cell = sys.load(file)
	return cell[1]
end

local no_challenge = nil
local save_to_memory_loc = function(str, n)
	local folder = "Trick Colors test"
	local file = sys.get_save_file(folder, str)
	local tab = {n}
	sys.save(file, tab)
end

local challenge
local challenges_passed = 0
local challenge_status -- true if the challenge was passed and false if not
--This function sets the challenge.
local set_challenge = function(index)
	if check_memory_loc("chal_index") == nil then	
		chosen_chal_index = math.random(#challenges)
		challenge_status = false
	else
		chosen_chal_index = check_memory_loc("chal_index")
		challenge_status = check_memory_loc("chal_status")
	end
	if check_memory_loc("n"..chosen_chal_index) == nil then
		if chosen_chal_index == 1 or chosen_chal_index == 2 then
			n = 5
		else
			n = 3
		end
	else
		n = check_memory_loc("n"..chosen_chal_index)
	end
	challenges = {--[[1]]	"Reach a score of "..tostring(n),
	--[[2]]	"Reach a score of "..tostring(n).."\nwithout using frictions",
	
	--[[3]]	"Beat your highscore",
	--[[4]] "Beat your highscore\nwithout using frictions",
	
	--[[5]]	"Get a "..tostring(n).."X color streak",
	--[[6]]	"Get a "..tostring(n).."X color streak\nwithout using frictions",
	
	--[[7]]	"Get a "..tostring(n).."X word streak",
	--[[8]]	"Get a "..tostring(n).."X word streak\nwithout using frictions",
	
	--[[9]]	"Double your highscore",
	--[[10]]"Double your highscore\nwithout using frictions",
	
	--[[11]]"Triple your highscore",
	--[[12]]"Triple your highscore\nwithout using frictions"
	}
	challenge = challenges[chosen_chal_index]
	save_to_memory_loc("chal_index", chosen_chal_index)
	save_to_memory_loc("chal_status", challenge_status)
	msg.post("#menu_test", "chal", {c = challenge, status = challenge_status})
end

local chal_status_check = function()
	if chosen_chal_index == 1 then
		if score == n then
			if n <= 1000 then
				n = n + 5
				save_to_memory_loc("n"..tostring(chosen_chal_index), n)
			end
			challenges_passed = challenges_passed + 1
		end
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 2 then
		if score == n and fric < n then
			if n <= 1000 then
				n = n + 5
				save_to_memory_loc("n"..tostring(chosen_chal_index), n)
			end
			challenges_passed = challenges_passed + 1
		end
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 3 then
		if score > highscore then

		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 4 then
		if score > n and fric < n then

		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 5 then
--		if then
			if n == 3 then
				n = 5
			elseif n > 3 then
				n = n + 5
			end
			save_to_memory_loc("n"..tostring(chosen_chal_index), n)
--		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 6 then
--		if then
			if n == 3 then
				n = 5
			elseif n > 3 then
				n = n + 5
			end
			save_to_memory_loc("n"..tostring(chosen_chal_index), n)
--		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 7 then
--		if then
			if n == 3 then
				n = 5
			elseif n > 3 then
				n = n + 5
			end
			save_to_memory_loc("n"..tostring(chosen_chal_index), n)
--		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 8 then
--		if then
			if n == 3 then
				n = 5
			elseif n > 3 then
				n = n + 5
			end
			save_to_memory_loc("n"..tostring(chosen_chal_index), n)
--		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 9 then
		local val = 2 * highscore
		if score >= val then

		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 10 then
		local val = 2 * highscore
		if score >= val and fric <= val then

		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 11 then
		local val = 3 * highscore
		if score >= val and fric <= val then

		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	elseif chosen_chal_index == 12 then
		local val = 3 * highscore
		if score >= val and fric <= val then

		end
		challenges_passed = challenges_passed + 1
		save_to_memory_loc("chal_status", true)
	end
end

function init(self)
	math.randomseed(os.time() * 1005)
	set_challenge()
end

function final(self)

end

local msg_set_chal = hash("set_chal")
local msg_change_chal = hash("change_challenge")
function on_message(self, message_id, message, sender)
	if message_id == msg_set_chal then
		set_challenge()
	elseif message_id == msg_change_chal then
		save_to_memory_loc("chal_index", nil) -- clear the memory location
		set_challenge()
	end
end