local TouchFb = require("modules.animation")
local Colors = require("modules.colors")

local colors

local page = 1
local adjust_colors = function ()
	for i in ipairs(colors) do
		local id = "_"..tostring(i)
		local node = gui.get_node(id)
		if page == 1 then
			if i <= 12 then
				local text_node = gui.get_node(tostring(i))
					gui.set_enabled(node, true)
				--if colors[i][2] == true then
					gui.set_color(node, colors[i][3])
					gui.set_text(text_node, colors[i][1])
				--end
			else
				gui.set_enabled(node, false)				
			end
		elseif page == 2 then
			if i >= 13 then
				local text_node = gui.get_node(tostring(i - 12))
				gui.set_enabled(node, true)
				--if colors[i][2] == true then
				gui.set_color(node, colors[i][3])
				gui.set_text(text_node, colors[i][1])
				--end
			else
				gui.set_enabled(node, false)				
			end				
		end
	end
	if page == 1 then
		page = 2
	else
		page = 1
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	self.b1 = gui.get_node("_1"); self.b2 = gui.get_node("_2"); self.b3 = gui.get_node("_3"); self.b4 = gui.get_node("_4")
	self.b5 = gui.get_node("_5"); self.b6 = gui.get_node("_6"); self.b7 = gui.get_node("_7"); self.b8 = gui.get_node("_8")
	self.b9 = gui.get_node("_9"); self.b10 = gui.get_node("_10"); self.b11 = gui.get_node("_11"); self.b12 = gui.get_node("_12")
	self.b13 = gui.get_node("_13"); self.b14 = gui.get_node("_14"); self.b15 = gui.get_node("_15"); self.b16 = gui.get_node("_16")
	self.b17 = gui.get_node("_17"); self.b18 = gui.get_node("_18"); self.b19 = gui.get_node("_19"); self.b20 = gui.get_node("_20")
	self.b21 = gui.get_node("_21"); self.b22 = gui.get_node("_22"); self.b23 = gui.get_node("_23"); self.b24 = gui.get_node("_24")
	self.button_table = {self.b1, self.b2, self.b3, self.b4, self.b5, self.b6, 
				self.b7, self.b8, self.b9, self.b10, self.b11, self.b12,
				self.b13, self.b14, self.b15, self.b16, self.b17, self.b18,
				self.b19, self.b20, self.b21, self.b22, self.b23, self.b24}
	for i in ipairs(self.button_table) do
		gui.set_enabled(self.button_table[i], false)
	end
	colors = Colors.retrieve_colors()
	adjust_colors()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)

end

local button_tapped

local handle_input = function()
	if button_tapped == "menu" then
		-- do something
		print("menu")
	elseif button_tapped == "next" then
		adjust_colors()
		-- change the labels on the button between next and back
		local node = gui.get_node("next")
		if page == 1 then
			gui.set_text(node, "BACK")
		else
			gui.set_text(node, "NEXT")
		end
	else
		pprint(colors[button_tapped], button_tapped)
	end
end

local touch  = hash("touch")

function on_input(self, action_id, action)
	local menu = gui.get_node("_menu"); local next = gui.get_node("_next")
	if action_id == touch and action.released then
		if gui.pick_node(menu, action.x, action.y) then
			button_tapped = 'menu'
			TouchFb.touch_feedback(menu, handle_input)
		elseif gui.pick_node(next, action.x, action.y) then
			button_tapped = 'next'
			TouchFb.touch_feedback(next, handle_input)
		else
			for i in ipairs(self.button_table) do
				if gui.pick_node(self.button_table[i], action.x, action.y) == true then
					if page == 2 and i <= 12 then -- it checks if the page is 2 because the page is set to 2 after the function is called in the init function  
						button_tapped = i
						TouchFb.touch_feedback(self.button_table[button_tapped], handle_input)
					elseif page == 1 and i >= 12 then -- same as the comment above except 1 and 2 are interchanged
						button_tapped = i	
						TouchFb.touch_feedback(self.button_table[button_tapped], handle_input)
					end
				end
			end
		end
	end
end