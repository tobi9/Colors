local TouchFb = require("modules.animation")

local is_exit_prompt_active
local function hide_exit_prompt()
	local nodes = {'exit_dialogue_box', 'exit_text', 'yes_exit', 'no_exit', 'yes','no'}	
	for i in ipairs(nodes) do
		local node = gui.get_node(nodes[i])
		gui.set_enabled(node, false)
	end
	local node_strings = {'gameover', "_resume", "_restart", "_sound",
	"_menu", 'resume', 'restart', 'sound', 'menu', 'show_ad', 'ad_text', "board", "brakes", "lives", "coins",
	"money", "challenge_txt", "challenge", "_chal_but", "chal_but"}
	for i in ipairs(node_strings) do
		local node = gui.get_node(node_strings[i])
		gui.set_enabled(node, true)
	end
	is_exit_prompt_active = false
end

local function show_exit_prompt()
	local nodes = {'exit_dialogue_box', 'exit_text', 'yes_exit', 'no_exit', 'yes','no'}	
	for i in ipairs(nodes) do
		local node = gui.get_node(nodes[i])
		gui.set_enabled(node, true)
	end
	local text = gui.get_node('exit_text')
	local node_strings = {'gameover', "_resume", "_restart", "_sound",
	"_menu", 'resume', 'restart', 'sound', 'menu', 'show_ad', 'ad_text', "board", "brakes", "lives", "coins",
	"money", "challenge_txt", "challenge", "_chal_but", "chal_but"}
	for i in ipairs(node_strings) do
		local node = gui.get_node(node_strings[i])
		gui.set_enabled(node, false)
	end
	is_exit_prompt_active = true
end

local req_challenge = function()
	msg.post("main:/main#challenges", "challenges_requested")
end

function init(self)
	req_challenge()
	hide_exit_prompt()
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	msg.post(ANALYZER, 'gameover')
	msg.post("/gameover#ended", "play_sound", {delay = 0, gain = 1})
	msg.post(".", "acquire_input_focus")
	--notify the controller script of the game over
	msg.post("level:/controller#controller", "streaks_needed")
	-- set the score
	local score_id = gui.get_node("score")
	gui.set_text(score_id, score)
	-- display the highscore
	if score > highscore then

	else

	end
	local best_id = gui.get_node('best')
	gui.set_text(best_id, "best\n"..tostring(highscore))
	local m = gui.get_node("money")
	gui.set_text(m, "$"..tostring(money))
	local b = gui.get_node("brakes")
	gui.set_text(b, "BRAKES\n"..tostring(brakes))
	local l = gui.get_node("lives")
	gui.set_text(l, "LIVES\n"..tostring(lives))
	local c = gui.get_node("coins")
	gui.set_text(c, "COINS\n"..tostring(coins))
end

function final(self)
	msg.post(".", "release_input_focus")
end

local button_tapped = nil

local function handle_input()
	if button_tapped == 'resume' then 
		msg.post(main, 'resume', {col = "gameover"})-- tells the controller script which collection to unload when resuming
		lives = lives - 1
		msg.post(ANALYZER, 'respawn_used')
	elseif button_tapped == 'show_ad' then
		msg.post("main:/main#main", "show_ad", {id = "gameover:/gameover#gameover"})
	elseif button_tapped == 'restart' then
		chances = const_chances
		msg.post(main, 'restart', {col = "gameover"})-- tells the controller script which collection to unload when restarting	
	elseif button_tapped == 'sound' then
		msg.post("main:/main#main", "sound")
	elseif button_tapped == 'menu' then
		show_exit_prompt()
	elseif button_tapped == 'chal_but' then
		if chal_status then
			chal_changes_allowed = 2 -- global variable declared in the menu gui script
			--give reward
		else
			if chal_changes_allowed > 0 then
				chal_changes_allowed = chal_changes_allowed - 1
				msg.post("main:/main#challenges", "change_challenge")
				timer.delay(0.001, false, req_challenge)
			end
		end
	elseif button_tapped == 'yes' then
		msg.post(main, 'return_2_menu', {col = "gameover"})-- tells the controller script which collection to unload when returning to menu
	else
		hide_exit_prompt()
	end
end


-- message ids
local msg_challenges = hash("challenges")
local adj_currencies = hash("adjust_currencies")
local landmark = hash("landmark")
local msg_completed = hash("completed")
local msg_chal = hash("chal")

function on_message(self, message_id, message, sender)
	if message_id == msg_chal then
		local node = gui.get_node("challenge")
		gui.set_text(node, message.c)
		chal_status = message.status
		node = gui.get_node("chal_but") -- I reused the node variable to accomodate the text on the challenge button
		if chal_status then
			gui.set_text(node, "TAP TO GET\nREWARD")
		else
			gui.set_text(node, "CHANGE\nCHALLENGE")
		end
		node = gui.get_node("challenge_reward")
		chal_reward = message.reward * NumOfColorsPicked
		gui.set_text(node, "REWARD\n$"..chal_reward)
	elseif message_id == adj_currencies then

	elseif message_id == msg_completed then
		msg.post("/gameover#reward", "play_sound", {delay = 0, gain = 1})
		lives = lives + 1
		-- adjust the lives
		local lives_id = gui.get_node("lives")
		gui.set_text(lives_id, "LIVES"..tostring(lives))
	end
end

-- touch_ids
local touch = hash("touch")
local back = hash("back")

function on_input(self, action_id, action)
	if action_id == touch and action.released then
		local _resume  = gui.get_node('_resume')
		local _restart = gui.get_node('_restart')
		local _sound = gui.get_node('_sound')
		local _menu = gui.get_node('_menu')
		local chal_but = gui.get_node("_chal_but")
		local show_ad = gui.get_node('show_ad')
		local yes = gui.get_node("yes_exit")
		local no = gui.get_node("no_exit")
		if gui.pick_node(_resume, action.x, action.y) and lives > 0 and is_exit_prompt_active == false then 
			button_tapped = 'resume'
			TouchFb.touch_feedback(_resume, handle_input)
		elseif gui.pick_node(show_ad, action.x, action.y) and is_exit_prompt_active == false then
			button_tapped = 'show_ad'
			TouchFb.touch_feedback(show_ad, handle_input)
		elseif gui.pick_node(_restart, action.x, action.y) and is_exit_prompt_active == false then
			button_tapped = 'restart'
			TouchFb.touch_feedback(_restart, handle_input)
			msg.post(ANALYZER, "game_restarted")
		elseif gui.pick_node(_sound, action.x, action.y) and is_exit_prompt_active == false then
			button_tapped = 'sound'
			TouchFb.touch_feedback(_sound, handle_input)
		elseif gui.pick_node(_menu, action.x, action.y) and is_exit_prompt_active == false then
			button_tapped = 'menu'
			TouchFb.touch_feedback(_menu, handle_input)
		elseif gui.pick_node(chal_but, action.x, action.y) then
			button_tapped = 'chal_but'
			TouchFb.touch_feedback(chal_but, handle_input)
		elseif gui.pick_node(yes, action.x, action.y) then
			button_tapped = 'yes'
			TouchFb.touch_feedback(yes, handle_input)
		elseif gui.pick_node(no, action.x, action.y) then
			button_tapped = 'no'
			TouchFb.touch_feedback(no, handle_input)
		end
	elseif action_id == back then
		if is_exit_prompt_active == false then
			button_tapped = 'exit'
			TouchFb.touch_feedback(exit, handle_input)
		else
			hide_exit_prompt()
		end
	end
end