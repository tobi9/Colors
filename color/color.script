local Color = require("modules.colors")

local controller = 'level:/controller#controller' -- the address of the controller script
local pos = nil -- the variable will contain the position of the go
local my_words
local my_colors
local color = nil -- the color in vector4 form
local my_color -- the string of the color
local my_word = nil-- the game object's word
local qst
local answer_type -- this variable is needed by the controller script in ascertaining the correct type of streak to record. it can only be two strings "word" or "color"
local answer = nil -- this is the value the script sends so it can be compared with the button the was clicked

local movement  = function (self)
	pos.x = pos.x + speed
	go.set_position(pos)
	msg.post("#", "check_pos")
end


local check_pos = function (self)
	pos = go.get_position()
	if pos.x < 700 then
		timer.delay(0, false, movement)
	else
		if answered == false then
			msg.post(controller, "wrong", {type = answer_type, answer = answer}) -- this message tells the controller script the answer is correct for a particular color and type
			if lives == 0 then
				msg.post(main, "gameover")
			else
				msg.post(level_gui, "show_prompt", {situation = "gameover"})
			end
			msg.post("#wrong", "play_sound", {delay = 0, gain = 0.7})
		end
		go.delete() -- the go deletes after it passes 700 on the x-axis
	end
end	

function init(self)
	msg.post(analyzer, "new_spawn")
	if ad_for_hints_played == false and speed > 7 then -- video_watched is a global varible declared in the controller script
		msg.post(level_gui, "show_prompt", {situation = "hints"})
	end
	--CHECK HERE FOR BUGS
	my_words = color_strings
	my_colors = colors
	timer.delay(0, false, check_pos)
	math.randomseed(os.time()*1001)
	self.color_ptr = math.random(#my_colors)-- position of the color in the table
	color = my_colors[self.color_ptr]
	my_color = my_words[self.color_ptr]
	Color.set_label_color('#label', color)
	self.word_ptr = math.random(#my_words) 	-- index of the word to be chosen
	my_word = my_words[self.word_ptr]
	label.set_text("#label", my_word) -- sets itself to the randomly selected word	
end

function final(self)
	msg.post(controller, "im_dead") --lets the controller object know its dead
end

local answer = nil -- this is the value the script sends so it can be compared with the button the was clicked
local hint
local current_speed -- records the speed of the object at the time the prompt was shown
--message ids
local color_is = hash("your_color_is")
local check_this = hash("check_this")
local msg_check_pos = hash("check_pos")
local msg_hide = hash("hide")
local msg_unhide = hash("unhide")

function on_message(self, message_id, message, sender)
	if message_id == color_is then
		if question == "WHAT WORD?" then -- this sets the answer to any of the questions so it can be sent to the input
			answer = my_word
			hint = self.word_ptr
			answer_type = "word"
		else
			answer = my_color
			hint = self.color_ptr
			answer_type = "color"
		end
		msg.post(controller, "answer", {hint = hint})
	elseif message_id == check_this and answered == false then
		-- the level_gui is the address of the level.gui it was declared in the controller.script
		if answer == color_strings[message.ans_ptr] then-- checks the answwer
			msg.post("#right", "play_sound", {delay = 0, gain = 0.7})
			msg.post(level_gui, "add_score") --if the answer is correct this line notifies the level.gui_script to increment the score
			msg.post(controller, "correct", {type = answer_type, answer = answer}) -- this message tells the controller script the answer is correct for a particular color and type
		else
			msg.post("#wrong", "play_sound", {delay = 0, gain = 0.7})
			msg.post(controller, "wrong", {type = answer_type, answer = answer}) -- this message tells the controller script the answer is correct for a particular color and type
			if lives == 0 then
				msg.post(main, "gameover")
			else
				msg.post(level_gui, "show_prompt", {situation = "gameover"})
			end
		end
		answered = true -- this is a global variable declared in the controller script
	elseif message_id == msg_check_pos then
		check_pos()
	elseif message_id == msg_hide then
		current_speed = speed
		speed = 0
		label.set_text("#label", " ")
	elseif message_id == msg_unhide then
		label.set_text("#label", my_word)
		speed = current_speed
	end
end